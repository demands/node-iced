#!/usr/bin/env node

// Generated by CoffeeScript 1.6.3
var crypto, fileName, fs, glacier, knownOpts, nopt, params, parsedOptions, shasum, shortHands, stats, vaultName;

exports.command = {
  description: 'Uploads files to a glacier archive'
};

if (require.main === module) {
  glacier = require('../lib/glacier');
  fs = require('fs');
  crypto = require('crypto');
  nopt = require('nopt');
  knownOpts = {
    description: String
  };
  shortHands = {
    d: ['--description']
  };
  parsedOptions = nopt(knownOpts, shortHands, process.argv);
  vaultName = parsedOptions.argv.remain.shift();
  fileName = parsedOptions.argv.remain.shift();
  if (!((vaultName != null) && (fileName != null))) {
    console.error("usage: iced archive <vault> <file> [--description=<description>] [--partsize=<filesize>]\n\nUploads <file> into <vault>.\n\n--description (-d) Assigns <description> to the archive\n--partsize    (-p) Divides the file into multiple <filesize> parts and uploads each separately.\n                   Capable of parsing human-readable filesizes, like MB or KB. (Default value: 100MB)");
    process.exit(1);
  }
  stats = fs.statSync(fileName);
  console.log(stats);
  params = {
    vaultName: vaultName
  };
  params.body = fs.readFileSync(fileName);
  shasum = crypto.createHash('sha256');
  shasum.update(params.body);
  params.checksum = shasum.digest('hex');
  if (parsedOptions.description != null) {
    params.archiveDescription = parsedOptions.description;
  }
  glacier.uploadArchive(params, function(err, data) {
    if (err != null) {
      console.error(err.message);
      process.exit(1);
    }
    console.log("uploaded to " + data.location);
    console.log(data);
    return process.exit(0);
  });
}
